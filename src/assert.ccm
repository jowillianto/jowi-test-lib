
module;

#include <format>
#include <source_location>
#include <vector>

export module test_lib:assert;
import :exception;

namespace test_lib {
  template <typename T, typename V>
  concept EqualComp = requires(const T &x, const V &v) {
    { x == v } -> std::convertible_to<bool>;
  };
  template <typename T, typename V>
  concept LtComp = requires(const T &x, const V &v) {
    { x < v } -> std::convertible_to<bool>;
  };

  export template <typename T, EqualComp<T> V>
  void assert_equal(
    const T &x,
    const V &y,
    std::source_location location = std::source_location::current()
  ) {
    if (!(x == y))
      throw FailAssertion(std::format(
        "At {} Line {} , {} is not equal to {}",
        location.file_name(),
        location.line(),
        x,
        y
      ));
  }

  export template <typename T, LtComp<T> V>
  void assert_lt(
    const T &x,
    const V &y,
    std::source_location location = std::source_location::current()
  ) {
    if (!(x < y))
      throw FailAssertion(std::format(
        "At {} Line {} , {} is not less than {}",
        location.file_name(),
        location.line(),
        x,
        y
      ));
  }

  export template <typename T, EqualComp<T> V>
  void assert_equal(
    const std::vector<T> &x,
    const std::vector<V> &y,
    std::source_location location = std::source_location::current()
  ) {
    if (x.size() != y.size()) return;
    for (uint32_t i = 0; i < x.size(); i += 1) {
      try {
        assert_equal(x[i], y[i]);
      } catch (const FailAssertion &e) {
        throw FailAssertion(e.msg() + std::format("at index {}", i));
      }
    }
  }

  export template <typename T, LtComp<T> V>
  void assert_lt(
    const std::vector<T> &x,
    const std::vector<V> &y,
    std::source_location location = std::source_location::current()
  ) {
    if (x.size() != y.size()) return;
    for (uint32_t i = 0; i < x.size(); i += 1) {
      try {
        assert_lt(x[i], y[i]);
      } catch (const FailAssertion &e) {
        throw FailAssertion(e.msg() + std::format("at index {}", i));
      }
    }
  }
}