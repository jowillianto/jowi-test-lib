module;
#include <expected>
#include <format>
#include <string>
export module moderna.test_lib:test_config;
import :test_result;
import :exception;

namespace test_lib {
  template <std::invocable F> struct TestConfig {
  public:
    /*
      Initializes and creates a test config with a specific name
    */
    TestConfig(std::string test_name, F test_func) :
      _invocable{std::move(test_func)}, _test_name{std::move(test_name)} {}
    /*
      This will run the test config with a specific name. Guaranteed that this function
      will never throw.
    */
    TestResult operator()() const noexcept {
      try {
        _invocable();
        return TestResult{test_name()};
      } catch (const FailAssertion &e) {
        return TestResult{test_name(), std::format("FailAssertion({})", e.msg())};
      } catch (const std::exception &e) {
        return TestResult{test_name(), std::format("{}({})", typeid(e).name(), e.what())};
      }
    }
    /*
      Returns the name of the test.
    */
    std::string_view test_name() const noexcept {
      return _test_name;
    }

  private:
    F _invocable;
    std::string _test_name;
  };
}