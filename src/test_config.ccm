module;
#include <expected>
#include <format>
#include <string>
export module moderna.test_lib:test_config;
import :test_result;
import :exception;

namespace moderna::test_lib {
  template <std::invocable F> struct test_config {
  public:
    /*
      Initializes and creates a test config with a specific name
    */
    test_config(std::string_view test_name, F test_func) :
      _invocable{std::move(test_func)}, _test_name{std::move(test_name)} {}
    /*
      This will run the test config with a specific name. Guaranteed that this function
      will never throw.
    */
    test_result operator()() const noexcept {
      try {
        _invocable();
        return test_result{test_name()};
      } catch (const fail_assertion &e) {
        return test_result{test_name(), std::format("fail_assertion({})", e.msg())};
      } catch (const std::exception &e) {
        return test_result{test_name(), std::format("{}({})", typeid(e).name(), e.what())};
      }
    }
    /*
      Returns the name of the test.
    */
    std::string_view test_name() const noexcept {
      return _test_name;
    }

  private:
    F _invocable;
    std::string_view _test_name;
  };
}