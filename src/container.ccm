module; 

#include <shared_mutex>
#include <functional>
#include <mutex>

export module test_lib:container;

namespace test_lib{
  template<typename T>
  class ThreadSafeContainer{
    T _value;
    std::shared_mutex _lock;
    public:
      template<typename ...Args>
      ThreadSafeContainer(Args&& ...args) : 
        _value(std::forward<Args>(args)...)
      {}
      void read(const std::function<void(const T& value)>& func){
        std::shared_lock<std::shared_mutex> lock{_lock};
        func(_value);
      }
      void write(const std::function<T(const T& value)>& func){
        std::unique_lock<std::shared_mutex> lock{_lock};
        _value = func(_value);
      }
  };
};