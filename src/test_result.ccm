module;
#include <format>
#include <iterator>
#include <numeric>
#include <optional>
#include <string>
#include <string_view>
export module moderna.test_lib:test_result;

namespace moderna::test_lib {
  /*
    Holds the result of the test, this includes the message obtained from running the test,
    the error message and the test result status.
  */
  struct TestResult {
  public:
    TestResult() : _test_name{""}, _message{""} {}
    /*
      Initializes the TestResult with only the test name. This implies that the test has succeeded
      without any errors
    */
    TestResult(std::string_view test_name) : _test_name{test_name}, _message{std::nullopt} {}
    /*
      Initializes the TestResult with the test name and err message. This implies a failed test.
    */
    TestResult(std::string_view test_name, std::string err_message) :
      _test_name{test_name}, _message{err_message} {}
    /*
      Returns the message contained in this TestResult. This will return the message if the
      test incurs an error and empty otherwise.
    */
    std::optional<std::string_view> message() const noexcept {
      if (_message.has_value()) return _message;
      else
        return std::nullopt;
    }
    /*
      Returns the test_name ran by this test_result
    */
    std::string_view test_name() const noexcept {
      return _test_name;
    }
    /*
      Returns if the current test result had an error
    */
    bool is_error() const noexcept {
      return _message.has_value();
    }
    /*
      Returns if the current test result is ok
    */
    bool is_ok() const noexcept {
      return !_message.has_value();
    }

  private:
    std::optional<std::string> _message;
    std::string _test_name;
  };
  /*
    Holds a bulk result of the test, this includes all of the messages obtained from running the
    test.
  */
  template <size_t size> struct ResultList {
    using container_t = std::array<TestResult, size>;

  public:
    ResultList() : _ok_cache{std::nullopt}, _err_cache{std::nullopt} {}
    /*
      Writes a given value to the container.
    */
    template <size_t id> void write_result(TestResult result) {
      _container[id] = std::move(result);
      if (_ok_cache.has_value()) _ok_cache = std::nullopt;
      if (_err_cache.has_value()) _err_cache = std::nullopt;
    }
    /*
      Reads the result specified at the index id.
    */
    template <size_t id> const TestResult &get() const {
      return _container[id];
    }
    /*
      Reads the result dynamically specified at the index id.
    */
    const TestResult &get(size_t id) const {
      return _container[id];
    }
    /*
      Begin Iterator for iteration
    */
    container_t::const_iterator begin() const {
      return _container.begin();
    }
    /*
      End Iterator for iteration
    */
    container_t::const_iterator end() const {
      return _container.end();
    }
    /*
      Returns the number of errors incurred in the ResultList. This will cache the result if needed
    */
    size_t err_count() const {
      if (!_err_cache.has_value()) {
        _err_cache = std::accumulate(
          _container.begin(),
          _container.end(),
          static_cast<size_t>(0),
          [](size_t prev, const TestResult &e) { return e.is_error() ? prev + 1 : prev; }
        );
      }
      return _err_cache.value();
    }
    /*
      Returns the numbers of successes in the ResultList. This will cache the result if needed
    */
    size_t ok_count() const {
      if (!_ok_cache.has_value()) {
        _ok_cache = std::accumulate(
          _container.begin(),
          _container.end(),
          static_cast<size_t>(0),
          [](size_t prev, const TestResult &e) { return e.is_ok() ? prev + 1 : prev; }
        );
      }
      return _ok_cache.value();
    }
    size_t total_count() const {
      return size;
    }

  private:
    container_t _container;
    mutable std::optional<size_t> _ok_cache;
    mutable std::optional<size_t> _err_cache;
  };
}

/*
  Specialization for text formatting.
*/
template <> struct std::formatter<moderna::test_lib::TestResult> : public std::formatter<std::string_view> {
  constexpr auto parse(std::format_parse_context &ctx) const {
    return ctx.begin();
  }
  template<class FormatContext>
  auto format(const moderna::test_lib::TestResult &obj, FormatContext &ctx)
    const {
    if (obj.is_ok()) return std::format_to(ctx.out(), "status\t: OK\n\n");
    else {
      std::string with_err;
      with_err.reserve(19 + obj.message().value().length());
      std::format_to(
        std::back_inserter(with_err), "status\t:ERR\nerr\t:{}\n", obj.message().value()
      );
      return std::formatter<std::string_view>::format(with_err, ctx);
    }
  }
};