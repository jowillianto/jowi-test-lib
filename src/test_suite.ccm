module;
#include <atomic>
#include <concepts>
#include <format>
#include <future>
#include <iostream>
#include <mutex>
#include <string>
#include <string_view>
#include <tuple>
export module moderna.test_lib:test_suite;
import :test_result;
import :test_config;
import :exception;

namespace moderna::test_lib {
  export template <std::invocable<size_t> progress_hook_f> struct tester_config {
    std::string_view suite_name;
    bool is_parallel;
    bool print_progress;
    progress_hook_f progress_hook;

    constexpr tester_config(
      std::string_view name,
      bool parallel = true,
      bool print_progress = true,
      progress_hook_f f = [](size_t _) {}
    ) : suite_name{name}, is_parallel{parallel}, print_progress{print_progress}, progress_hook{f} {}
  };
  export template <std::invocable<size_t> progress_hook_f, std::invocable... Fs> struct tester {
    using container_t = std::tuple<test_config<Fs>...>;

  public:
    /*
      This constructor is for internal use.
    */
    constexpr tester(tester_config<progress_hook_f> config, container_t tests) :
      _tests(tests), _config(config) {}
    /*
      The amount of test contained in this tester
    */
    static consteval size_t test_count() noexcept {
      return sizeof...(Fs);
    }
    /*
      If the computation is parallel
    */
    constexpr bool is_parallel() const {
      return _config.is_parallel;
    }
    /*
      The name of the suite.
    */
    constexpr std::string_view suite_name() const {
      return _config.suite_name;
    }
    /*
      Adds a test
    */
    template <std::invocable F>
    constexpr tester<progress_hook_f, F, Fs...> add_test(std::string_view test_name, F test_func)
      const {
      return tester<progress_hook_f, F, Fs...>{
        _config,
        std::tuple_cat(std::make_tuple(test_config{test_name, test_func}), _tests)
      };
    }
    /*
      Run all the tests with the given configuration
    */
    result_list<test_count()> run_all() const noexcept {
      result_list<test_count()> results;
      std::array<std::future<void>, test_count()> futures;
      std::atomic<size_t> progress;
      std::mutex print_lock;
      _run_tests<test_count(), 0>(results, futures, progress, print_lock);
      for (auto &future : futures) {
        future.get();
      }
      return results;
    }
    /*
      Prints the test results.
    */
    void print_or_exit(bool exit_on_error = true) const {
      const result_list<test_count()> &results = run_all();
      std::cout << "================== Test Result =====================\n";
      std::cout << "Test Suite : " << suite_name() << std::endl;
      std::cout << "Run type : " << (is_parallel() ? "parallel" : "one-by-one") << std::endl;
      std::cout << "Number of test : " << test_count() << std::endl;
      std::cout << "Number of errors : " << results.err_count() << std::endl;
      std::cout << "Number of OKs : " << results.ok_count() << std::endl;
      std::cout << "================== Test Report =====================\n";
      size_t i = 1;
      for (const test_result &result : results) {
        std::cout << std::format("{}. {}::{}\n{}\n", i, suite_name(), result.test_name(), result)
                  << std::endl;
        i += 1;
      }
      if (results.err_count() != 0 && exit_on_error) {
        throw fail_assertion("There are erroneous test");
      }
    }

  private:
    container_t _tests;
    tester_config<progress_hook_f> _config;
    /*
      Recursively runs the test, alternates between lazily evaluated future and threaded future.
    */
    template <size_t t = test_count(), size_t cur = 0>
    void _run_tests(
      result_list<t> &results,
      std::array<std::future<void>, test_count()> &futures,
      std::atomic<size_t> &progress,
      std::mutex &print_lock
    ) const {
      futures[cur] = std::async(
        _config.is_parallel ? std::launch::async : std::launch::deferred,
        [this, &results, &progress, &print_lock]() mutable {
          auto &test_config = std::get<cur>(_tests);
          if (_config.print_progress) {
            std::unique_lock l{print_lock};
            std::cout << std::format("Running : {}", test_config.test_name()) << std::endl;
          }
          results.template write_result<cur>(test_config());
          size_t prev_progress = progress.fetch_add(1, std::memory_order::relaxed);
          if (_config.print_progress) {
            std::unique_lock l{print_lock};
            std::cout << std::format(
                           "Progress : {} / {} [ Ran : {}]",
                           prev_progress + 1,
                           test_count(),
                           test_config.test_name()
                         )
                      << std::endl;
          }
          _config.progress_hook(prev_progress + 1);
        }
      );
      if constexpr (cur + 1 < test_count())
        _run_tests<test_count(), cur + 1>(results, futures, progress, print_lock);
    }
  };

  export template <std::invocable<size_t> progress_hook_f>
  constexpr tester<progress_hook_f> make_tester(
    std::string_view name,
    bool parallel = true,
    bool print_progress = true,
    progress_hook_f f = [](size_t _) {}
  ) {
    return tester<progress_hook_f>{tester_config{name, parallel, print_progress, f}, {}};
  }
  export constexpr auto make_tester(
    std::string_view name, bool parallel = true, bool print_progress = true
  ) {
    auto lambda = [](size_t _) {};
    return tester<decltype(lambda)>{tester_config{name, parallel, print_progress, lambda}, {}};
  }
}